React-router-dom
@ exact 

@param경로로 넘기는 첫번째 방법    > 경로:id	
<BrowserRouter> 내부에 <Router path="/경로" component={page_name}>
경로가 정확히 일치해야할 때에는 exact를 추가해준다.


path에서 "/profile:id"로 호출하면 Profile.jsx에서 props로 인자를 받아
const id = props.match.params.id;
string 값을 받아올수있다.

{id && <p>ID는 {id}입니다.</p>}
id가 있을때 출력 해줄수 있다.


@param경로로 넘기는 첫번째 방법 > QueryString
  const searchParams = props.location.search;

 $ npm i query-string -S
// About.jsx 
import queryString from 'query-string'


@switch 와 notFound
여러 route중 순서대로 먼저 맞는 하나만 보여줌
exact를 뺄수있음 (맨 아래 경로는 제외! )
페이지가 없는 경우 not found 페이지를 표시함!

if-elseif 문처럼 작은범위부터 큰 범위로 가야함

@Link: JSX 링크로 라우팅 이동하기
a태그 대신 React-route-dom에서 제공하는 Link 기능 

@NavLink: 네비게이션 링크
Link와 설정 방법은 동일함.
activeStyle: 활성화 됐을때 스타일을 줄수 있음
isActive: match와 location을 인자로 받아와 값에 따라 활성화 시켜줄수있음

@ JS로 라우팅 이동하기
// Login.jsx
LoginButton을 import하고
<LoginButton {...props}/>

// LoginButton.jsx
~ function LoginButton(props) 

 LoginButton.jsx에서 직접 props를 확인할수없으므로
상위 컴포넌트(페이지인가?)에서 값을 넘겨주어야한다.

하위 컴포넌트로 많이 내려가게되면 번거로워지므로 다음 2가지 방법을 제시한다.

1. HOC  사용  
 - withRotuer를 import해서 function LoginButton 부분 전체를 withRouter(여기!) 내부에 넣어주면 된다.
 - 나중에 강의에서 동작원리를 배울 예정.

2. Hook 


@Redirect
// App.js 
const isLogin = true;
<Route
  path="/login2"
  render={() => (isLogin ? <Redirect to="/" /> : <Login />)}
/>
/login2로 페이지요청을 보냈을때 
isLoign에 값이 true 라면 바로 메인 페이지로 이동하고,
아니라면 Login 페이지로 이동하게 한다.


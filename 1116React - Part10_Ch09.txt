React Advanced

불필요한 렌더 줄이는 방법 .........

1) Optimizing Performance: 필요할때 렌더한다
$ npx create-react-app react-advanced

@ 기본 조건 !! 
먼저 1초마다 한번씩 state.count 를 1씩 증가 시켜준다.
if문으로 state.count가 2로 나눠질때 / 아닐때를 반복시켜 실행한다.!!!

1) 서로다른 엘리먼트는 서로 다른 트리를 만들어낸다.
 - 2로 나눠질때 div태그 아닐때 span태그로 Foo컴포넌트를 출력시켜준다.
div 태그와 span 태그내에 같은 Foo라는 컴포넌트를 추가하더라도
div와 span 은 다르기 때문에 mount와 unmount를 반복하게된다.

2-1) 같은 타입의 엘리먼트는 어트리뷰트를 업데이트 시킨다.
 - 2로 나눠질때 <div className="before" title="stuff"></div>;
  아닐때 <div className="after" title="stuff"></div>;
로 코드를 변경한 경우에는, 클래스명만 1초에 한번 변하게 된다.

2-2)
 - if (this.state.count % 2 === 0) {
      return <div style={{ color: "red", fontWeight: "bold" }} />;
    }
    return <div style={{ color: "green", fontWeight: "bold" }} />;
도 동일!

3) 컴포넌트가 마운트, 언마운트 되는게 아닌, 업데이트 된다는 사실.
 -  <Foo name="mark" />; 
  < Foo name="hanna" />;


2) React.createPortal  (일반적인 경우엔 사용되지 않을수있으므로 필요에 따라서 사용)

div 안에 다른 태그를 만들어서 넣고싶을때
 //  Modal.jsx
const Modal = ({ children }) =>
  ReactDom.createPortal(children, document.querySelector("#modal"));
export default Modal;

// App.js
      {visible && (
        <Modal>
          <div
            style={{
              width: "100vW",
              height: "100vh",
              background: "rgba(0,0,0,0.5",
            }}
            onClick={close}
          >
            Hello?
          </div>
        </Modal>
      )}

이렇게 만들어주면 Modal이라는 div 내부에 style을 가진 div 가 추가된다.



3) React.forwardRef
하위 컴포넌트에 있는 레퍼런스를 상위 컴포넌트에서 사용
// MyInput.jsx
import React from "react";
export default React.forwardRef(function MyInput(props, ref) {
  return (
    <div>
      <p>MyInput</p>
      <input ref={ref} />
    </div>
  );
});



// App.js
function App() {
  const myInputRef = useRef();

  const click = () => {
    console.log(myInputRef.current.value);
  };
  return (
    <div>
      <MyInput ref={myInputRef} />
      <button onClick={click}>send</button>
    </div>
  );
}
export default App;
